import { getModelForClass, prop, pre, modelOptions } from '@typegoose/typegoose'
import mongoose, { Document } from 'mongoose'
import bcrypt from 'bcrypt'

/**
 * Class representing a user schema in the database.
 * 
 * This class includes automatic timestamps and methods for password encryption.
 */
@modelOptions({
  schemaOptions: {
    timestamps: true  // Enable automatic creation of `createdAt` and `updatedAt` fields.
  }
})
@pre<User>('save', async function() {
  // Hashes the password before saving if it is modified.
  if (this.isModified('password')) {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt)
  }
})
class User extends Document {
  /**
   * The unique identifier for the user, automatically generated by MongoDB.
   */
  @prop({ default: () => new mongoose.Types.ObjectId() })
  public _id!: mongoose.Types.ObjectId

  /**
   * The user's email address, required and must be unique.
   */
  @prop({ required: true, unique: true, index: true })
  public email!: string

  /**
   * Optional image name.
   */
  @prop()
  public imageName!: string

  /**
   * Optional identifier linking to the user's Facebook account.
   */
  @prop()
  public idFacebook?: number

  /**
   * Optional identifier linking to the user's Google account.
   */
  @prop()
  public idGoogle?: number

  /**
   * The user's hashed password, not selected by default in queries for security.
   */
  @prop({ required: true, select: false })
  public password!: string

  /**
   * The date the user was created, defaults to the current date/time.
   */
  @prop({ default: () => Date.now() })
  public created?: Date

  /**
   * The date of the user's last connection.
   */
  @prop()
  public lastConnection?: Date

  /**
   * An array of roles assigned to the user, defaults to an empty array.
   */
  @prop({ type: () => [String], default: [] })
  public roles?: string[]

  /**
   * Whether the user has confirmed their account via email, defaults to false.
   */
  @prop({ default: false })
  public confirm?: boolean
}

const UserModel = getModelForClass(User)
export { UserModel, User as UserSchema }
