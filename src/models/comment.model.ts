import { getModelForClass, prop, Ref } from '@typegoose/typegoose'
import { UserSchema } from './user.model'
import { LikeSchema } from './like.model'
import mongoose, { Document } from 'mongoose'
import { ContentType } from '../enums/contentType.enum'

/**
 * Schema definition for the Comment document. Represents a comment made by a user on various types of content.
 * Comments can be standalone or replies to other comments (nested comments).
 * Each comment can be associated with likes and can be related to other content types or be a part of a comment thread.
 */
class Comment extends Document {
  /**
   * The unique identifier for the comment, automatically generated by MongoDB.
   */
  @prop({ default: () => new mongoose.Types.ObjectId() })
  public _id!: mongoose.Types.ObjectId

  /**
   * Reference to the User who authored the comment.
   * This is a required field linking to the User schema.
   */
  @prop({ ref: () => UserSchema, required: true })
  public author!: Ref<UserSchema>

  /**
   * The type of content that the comment is associated with, defined by the ContentType enum.
   */
  @prop({ enum: ContentType, required: true })
  public contentType!: ContentType

  /**
   * The ID of the target content that the comment is addressing.
   * This field uses an index and a refPath to dynamically link to the type of content.
   */
  @prop({ required: true, index: true, refPath: 'contentType' })
  public targetId!: mongoose.Types.ObjectId

  /**
   * The text content of the comment.
   */
  @prop({ required: true })
  public content!: string

  /**
   * The date and time when the comment was posted.
   * Defaults to the current date and time.
   */
  @prop({ default: () => Date.now() })
  public postedAt!: Date

  /**
   * An array of likes associated with the comment, allowing for tracking of user interactions.
   */
  @prop({ ref: () => LikeSchema, default: [] })
  public likes!: Ref<LikeSchema>[]

  /**
   * Optional reference to a parent comment, enabling the creation of nested comment structures.
   */
  @prop({ ref: () => Comment })
  public parentComment?: Ref<Comment>
}

const CommentModel = getModelForClass(Comment)
export { CommentModel, Comment as CommentSchema }
